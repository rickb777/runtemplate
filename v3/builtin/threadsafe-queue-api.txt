func NewTypeQueue(capacity int, overwrite bool) *TypeQueue
func NewTypeSortedQueue(capacity int, overwrite bool, less func(i, j Type) bool) *TypeQueue
func BuildTypeQueueFromChan(source <-chan Type) *TypeQueue
func (queue *TypeQueue) Reallocate(capacity int, overwrite bool) *TypeQueue
func (queue *TypeQueue) Space() int
func (queue *TypeQueue) Cap() int
func (queue *TypeQueue) IsSequence() bool
func (queue *TypeQueue) IsSet() bool
func (queue *TypeQueue) ToList() *TypeList
func (queue *TypeQueue) ToSet() *TypeSet
func (queue *TypeQueue) ToSlice() []Type
func (queue *TypeQueue) ToInterfaceSlice() []interface{}
func (queue *TypeQueue) Clone() *TypeQueue
func (queue *TypeQueue) Get(i int) Type
func (queue *TypeQueue) Head() Type
func (queue *TypeQueue) HeadOption() (Type, bool)
func (queue *TypeQueue) Last() Type
func (queue *TypeQueue) LastOption() (Type, bool)
func (queue *TypeQueue) IsOverwriting() bool
func (queue *TypeQueue) IsFull() bool
func (queue *TypeQueue) IsEmpty() bool
func (queue *TypeQueue) NonEmpty() bool
func (queue *TypeQueue) Size() int
func (queue *TypeQueue) Len() int
func (queue *TypeQueue) Swap(i, j int)
func (queue *TypeQueue) Less(i, j int) bool
func (queue *TypeQueue) Sort()
func (queue *TypeQueue) StableSort()
func (queue *TypeQueue) Clear()
func (queue *TypeQueue) Add(more ...Type)
func (queue *TypeQueue) Push(items ...Type) *TypeQueue
func (queue *TypeQueue) Offer(items ...Type) []Type
func (queue *TypeQueue) Pop1() (Type, bool)
func (queue *TypeQueue) Pop(n int) []Type
func (queue *TypeQueue) Contains(v Type) bool
func (queue *TypeQueue) ContainsAll(i ...Type) bool
func (queue *TypeQueue) Exists(p func(Type) bool) bool
func (queue *TypeQueue) Forall(p func(Type) bool) bool
func (queue *TypeQueue) Foreach(f func(Type))
func (queue *TypeQueue) Send() <-chan Type
func (queue *TypeQueue) DoKeepWhere(p func(Type) bool) *TypeQueue
func (queue *TypeQueue) Find(p func(Type) bool) (Type, bool)
func (queue *TypeQueue) Filter(p func(Type) bool) *TypeQueue
func (queue *TypeQueue) Partition(p func(Type) bool) (*TypeQueue, *TypeQueue)
func (queue *TypeQueue) Map(f func(Type) Type) *TypeQueue
func (queue *TypeQueue) FlatMap(f func(Type) []Type) *TypeQueue
func (queue *TypeQueue) CountBy(p func(Type) bool) (result int)
func (queue *TypeQueue) Fold(initial Type, fn func(Type, Type) Type) Type
func (queue *TypeQueue) MinBy(less func(Type, Type) bool) Type
func (queue *TypeQueue) MaxBy(less func(Type, Type) bool) Type
func (queue *TypeQueue) Min() Type
func (queue *TypeQueue) Max() (result Type)
func (queue *TypeQueue) Sum() Type
func (queue *TypeQueue) StringList() []string
func (queue *TypeQueue) String() string
func (queue *TypeQueue) MkString(sep string) string
func (queue *TypeQueue) MkString3(before, between, after string) string
func (queue *TypeQueue) UnmarshalJSON(b []byte) error
func (queue TypeQueue) MarshalJSON() ([]byte, error)
